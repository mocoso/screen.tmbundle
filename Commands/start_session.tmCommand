<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -wKU

# Based on the Shell Script bundle's "Open Terminal" command

require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'

def project_name
  File.basename(ENV['TM_PROJECT_DIRECTORY'])
end

def screen_command
  if File.exists?(File.expand_path('.screenrc', ENV['TM_PROJECT_DIRECTORY']))
    screen_config = '-c .screenrc '
  else
    screen_config = ''
  end

  "screen #{screen_config}-S #{e_as(e_sh(project_name))} -D -R"
end

def is_running(process)
  all = `ps -U "$USER" -o ucomm`
  all.to_a[1..-1].find { |cmd| process == cmd.strip }
end

def terminal_script(dir)
  return &lt;&lt;-APPLESCRIPT
    tell application "Terminal"
      activate
      -- Hack to create new tab (no programatic interface to this?)
      tell application "System Events"
        tell process "Terminal" to keystroke "t" using command down
      end
      -- Assumes selected tab has not changed (we don't have a handle on the tab
      -- because of the way we created it so no other option)
      do script "cd #{e_as(e_sh(dir))}; #{screen_command}\n" in selected tab of front window
      tell front window to set custom title to "#{e_as(project_name)}"
    end tell
APPLESCRIPT
end

def iterm_script(dir)
  return &lt;&lt;-APPLESCRIPT
    tell application "iTerm"
      activate
      if exists the first terminal then
        set myterm to the first terminal
      else
        set myterm to (make new terminal)
      end if
      tell myterm
        activate current session
        launch session "Default Session"

        tell the last session
          set name to "#{e_as(project_name)}"
          write text "cd #{e_as(e_sh(dir))}; #{screen_command}"
        end tell
      end tell
    end tell
APPLESCRIPT
end

if dir = ENV['TM_PROJECT_DIRECTORY']
  script = nil
  if ENV['TM_TERMINAL'] =~ /^iterm$/i || is_running('iTerm')
    script = iterm_script(dir)
  else
    script = terminal_script(dir)
  end
  open("|osascript", "w") { |io| io &lt;&lt; script }
end
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^@a</string>
	<key>name</key>
	<string>Start Session</string>
	<key>output</key>
	<string>discard</string>
	<key>uuid</key>
	<string>C68EE723-D789-4A1E-81D3-3DF896CD43D0</string>
</dict>
</plist>
